// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.queries.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUser = `-- name: GetUser :one
SELECT email, full_name, intro, profile, role, password_hash, registered_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.FullName,
		&i.Intro,
		&i.Profile,
		&i.Role,
		&i.PasswordHash,
		&i.RegisteredAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users (
        email,
        full_name,
        intro,
        profile,
        role,
        password_hash
    )
VALUES ($1, $2, $3, $4, $5, $6)
`

type RegisterUserParams struct {
	Email        string      `json:"email"`
	FullName     string      `json:"full_name"`
	Intro        pgtype.Text `json:"intro"`
	Profile      pgtype.Text `json:"profile"`
	Role         Role        `json:"role"`
	PasswordHash string      `json:"-"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.Exec(ctx, registerUser,
		arg.Email,
		arg.FullName,
		arg.Intro,
		arg.Profile,
		arg.Role,
		arg.PasswordHash,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2
WHERE email = $1
`

type UpdateUserPasswordParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"-"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.Email, arg.PasswordHash)
	return err
}
